.TH NAME SECTION
.SH Name
rename \- file rename tool

.SH SYNOPSIS
.B rename 
.I OldName NewName
.P
.B rename
.I [options]  files ...

.SH DESCRIPTION
This
.I rename 
is a quick and powerful tool for 
.I upcasing, 
.I lowcasing
filenames or
.I substituting
substring in filenames, which can be specified with a regular expression 
pattern. Unlike other rename tools written in script language, this one is
written in C so it runs fast.

.SH OPTIONS
.TP
.B \-l, \-\-lowcase 
Lowcase specified filenames.

.TP
.B \-u, \-\-upcase
Upcase specified filenames.

.TP
.B \-R, \-\-recursive
Perform on the specified files and all subdirectories.

.TP
.B \-t, \-\-test
Do not change filenames, just test the result of substituting.

.TP
.B \-o, \-\-owner  OWNER 
When changing filenames, it changes the owner of filenames to OWNER.
This funtion not works only when renaming filename, but works individually
just like a file owner changer. (superuser only)

.TP
.B \-v, \-\-verbose
verbose display.

.TP
.B \-\-yes
confirm all prompts with YES.

.TP
.B \-\-no
confirm all prompts with NO.

.TP
.B \-s/PATTERN/STRING[/sw]
Substitute PATTERN with STRING in filenames.
.B sw
is the following switch:
.RS
.TP
.B g
replace all occurrences in the filename.
.TP
.B i
ignore case when searching.
.TP
.B b
backward searching and substituting. This does not support regular expression.
.TP
.B s
change filenames' suffix. In this case, the PATTERN should be some kind of
filename suffix.
.TP
.B r
declare that PATTERN is a regular expression.
.TP
.B e
declare that PATTERN is an extended regular expression.

.SH "REGULAR EXPRESSION"
This section about extended regular expression is digisted from the 
manpage of 
.B fgrep(1).
See it for details.
.PP
A regular expression is a pattern that describes a set of strings.
Regular expressions are constructed analogously to arithmetic
expressions, by using various operators to combine smaller expressions.
.PP
The fundamental building blocks are the regular expressions that match
a single character.  Most characters, including all letters and digits,
are regular expressions that match themselves.  Any metacharacter with
special meaning may be quoted by preceding it with a backslash.
.PP
A list of characters enclosed by
.B [
and
.B ]
matches any single
character in that list; if the first character of the list
is the caret
.B ^
then it matches any character
.I not
in the list.
For example, the regular expression
.B [0123456789]
matches any single digit.  A range of ASCII characters
may be specified by giving the first and last characters, separated
by a hyphen.
Finally, certain named classes of characters are predefined.
Their names are self explanatory, and they are
.BR [:alnum:] ,
.BR [:alpha:] ,
.BR [:cntrl:] ,
.BR [:digit:] ,
.BR [:graph:] ,
.BR [:lower:] ,
.BR [:print:] ,
.BR [:punct:] ,
.BR [:space:] ,
.BR [:upper:] ,
and
.BR [:xdigit:].
For example,
.B [[:alnum:]]
means
.BR [0-9A-Za-z] ,
except the latter form is dependent upon the ASCII character encoding,
whereas the former is portable.
(Note that the brackets in these class names are part of the symbolic
names, and must be included in addition to the brackets delimiting
the bracket list.)  Most metacharacters lose their special meaning
inside lists.  To include a literal
.B ]
place it first in the list.  Similarly, to include a literal
.B ^
place it anywhere but first.  Finally, to include a literal
.B \-
place it last.
.PP
The period
.B .
matches any single character.
The symbol
.B \ew
is a synonym for
.B [[:alnum:]]
and
.B \eW
is a synonym for
.BR [^[:alnum]] .
.PP
The caret
.B ^
and the dollar sign
.B $
are metacharacters that respectively match the empty string at the
beginning and end of a line.
The symbols
.B \e<
and
.B \e>
respectively match the empty string at the beginning and end of a word.
The symbol
.B \eb
matches the empty string at the edge of a word,
and
.B \eB
matches the empty string provided it's
.I not
at the edge of a word.
.PP
A regular expression may be followed by one of several repetition operators:
.PD 0
.TP
.B ?
The preceding item is optional and matched at most once.
.TP
.B *
The preceding item will be matched zero or more times.
.TP
.B +
The preceding item will be matched one or more times.
.TP
.BI { n }
The preceding item is matched exactly
.I n
times.
.TP
.BI { n ,}
The preceding item is matched
.I n
or more times.
.TP
.BI {, m }
The preceding item is optional and is matched at most
.I m
times.
.TP
.BI { n , m }
The preceding item is matched at least
.I n
times, but not more than
.I m
times.
.PD
.PP
Two regular expressions may be concatenated; the resulting
regular expression matches any string formed by concatenating
two substrings that respectively match the concatenated
subexpressions.
.PP
Two regular expressions may be joined by the infix operator
.BR | ;
the resulting regular expression matches any string matching
either subexpression.
.PP
Repetition takes precedence over concatenation, which in turn
takes precedence over alternation.  A whole subexpression may be
enclosed in parentheses to override these precedence rules.
.PP
The backreference
.BI \e n\c
\&, where
.I n
is a single digit, matches the substring
previously matched by the
.IR n th
parenthesized subexpression of the regular expression.
.PP
In basic regular expressions the metacharacters
.BR ? ,
.BR + ,
.BR { ,
.BR | ,
.BR ( ,
and
.BR )
lose their special meaning; instead use the backslashed
versions
.BR \e? ,
.BR \e+ ,
.BR \e{ ,
.BR \e| ,
.BR \e( ,
and
.BR \e) .

.SH "SEE ALSO"
mv(1), chown(1), regex(7), regex(3)

.SH COPYING
Copyright 1999 - 2001  Xu, Ming

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

.SH BUGS
Please send bug reports to <xuming@bigfoot.com>

.SH EXAMPLES
.TP 
.I rename foo food
Change file 'foo' to 'food', just like 
.I mv(1)
does.

.TP
.I rename -lR *
To lowcase all filenames, directories and filenames and directories under 
subdirectories.

.TP
.I rename -s/abc/xyz/gi *.c
Substitute all 'abc' substrings appeared in C sources files with 'xyz',
ignoring case.

.TP
.I rename -vs/.c/.cpp/s *.c
Change C sources suffix to C++ sources suffix, with verbose information.

.TP
.I rename -s/abc/12345/bi *
Find the last occurrence of 'abc' and replace it with '12345', ignoring case.

.TP
.I rename -o guest -R /home/custom
change the owner of the file '/home/custom' to 'guest'. The 'guest' should 
be an effective user in the current system. If '/home/custom' is a directory, 
all files in this directory tree will hand to 'guest'.

.TP
.I rename -s/^[A-Z].*file/nofile/r *
The target substring starts with a capital letter, and ends with string 'file'.
There are 0 or any numbers of characters between the capital letter and 'file'.
The substring, if encountered in filenames, will be replaced with 'nofile'.

.TP
.I rename -s/^[A-Z].+file/nofile/eg *
Similar to last example, except it uses extended regular expression, such as 
the '+' metacharacter, and replaces all matching strings with 'nofile'.




